{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Infecter_1 = require(\"./Particle/Infecter\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.NumberUtils.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.NumberUtils.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      const sizeRange = Utils_1.NumberUtils.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.NumberUtils.getRangeMin(sizeRange);\n      this.size.max = Utils_1.NumberUtils.getRangeMax(sizeRange);\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.NumberUtils.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    const rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value - rollOpt.darken.value\n          };\n        } else if (rollOpt.enlighten.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value + rollOpt.darken.value\n          };\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    const wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.create(0, 0);\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.NumberUtils.getRangeMax(opacityOptions.value),\n      min: Utils_1.NumberUtils.getRangeMin(opacityOptions.value),\n      value: Utils_1.NumberUtils.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = Utils_1.NumberUtils.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.NumberUtils.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.NumberUtils.getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.NumberUtils.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    const imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    const lifeOptions = particlesOptions.life;\n    this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeDelayTime = 0;\n    this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n    this.lifeTime = 0;\n    this.livesRemaining = particlesOptions.life.count;\n    this.spawning = this.lifeDelay > 0;\n\n    if (this.lifeDuration <= 0) {\n      this.lifeDuration = -1;\n    }\n\n    if (this.livesRemaining <= 0) {\n      this.livesRemaining = -1;\n    }\n\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.infecter = new Infecter_1.Infecter(container);\n    this.mover = new Mover_1.Mover(container, this);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n  }\n\n  move(delta) {\n    this.mover.move(delta);\n  }\n\n  update(delta) {\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return this.position.add(this.offset);\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n\n    if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n      return this.backColor;\n    }\n\n    return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.links = [];\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n      if (colorAnimation.sync) {\n        return;\n      }\n\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n\n  calcPosition(container, position, tryCount = 0) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n    const outMode = this.options.move.outMode;\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos, tryCount = 0) {\n    const overlapOptions = this.options.collisions.overlap;\n\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      let overlaps = false;\n\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      return overlaps;\n    }\n\n    return false;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: Object.assign(Object.assign({}, image), {\n          svgData: svgColoredData\n        }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n          if (this.image && img2) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/heather/Development/code/react-particles/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","ParticlesOptions_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","Vector_1","constructor","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","pathDelay","NumberUtils","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","getRangeValue","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","hslColor","ColorUtils","colorToHsl","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","initialPosition","offset","Vector","create","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","particleInit","delta","update","draw","canvas","drawParticle","getPosition","add","getRadius","radius","getMass","pow","getHslFromAnimation","getStrokeColor","destroy","override","plugin","plugins","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","x","y","canvasSize","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","angle","radOffset","range","left","right","straight","length","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","assign","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Infecter_1 = require(\"./Particle/Infecter\");\nconst Mover_1 = require(\"./Particle/Mover\");\nconst Vector_1 = require(\"./Particle/Vector\");\nclass Particle {\n    constructor(id, container, position, overrideOptions) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.links = [];\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\n                        ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\n                        : shapeData);\n                }\n            }\n        }\n        else {\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = Utils_1.NumberUtils.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.NumberUtils.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.NumberUtils.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.NumberUtils.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.NumberUtils.getRangeMin(sizeRange);\n            this.size.max = Utils_1.NumberUtils.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.NumberUtils.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.NumberUtils.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.NumberUtils.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.NumberUtils.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const hslColor = Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.ColorUtils.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value - rollOpt.darken.value,\n                    };\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value + rollOpt.darken.value,\n                    };\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.NumberUtils.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.NumberUtils.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(this.container, position);\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.create(0, 0);\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.NumberUtils.getRangeMax(opacityOptions.value),\n            min: Utils_1.NumberUtils.getRangeMin(opacityOptions.value),\n            value: Utils_1.NumberUtils.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.NumberUtils.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.NumberUtils.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.NumberUtils.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.NumberUtils.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        const imageShape = this.loadImageShape(container, drawer);\n        if (imageShape) {\n            this.image = imageShape.image;\n            this.fill = imageShape.fill;\n            this.close = imageShape.close;\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.Utils.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        const lifeOptions = particlesOptions.life;\n        this.lifeDelay = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeDelayTime = 0;\n        this.lifeDuration = container.retina.reduceFactor\n            ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                container.retina.reduceFactor) *\n                1000\n            : 0;\n        this.lifeTime = 0;\n        this.livesRemaining = particlesOptions.life.count;\n        this.spawning = this.lifeDelay > 0;\n        if (this.lifeDuration <= 0) {\n            this.lifeDuration = -1;\n        }\n        if (this.livesRemaining <= 0) {\n            this.livesRemaining = -1;\n        }\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.options.shadow.color);\n        this.updater = new Updater_1.Updater(container, this);\n        this.infecter = new Infecter_1.Infecter(container);\n        this.mover = new Mover_1.Mover(container, this);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n    }\n    move(delta) {\n        this.mover.move(delta);\n    }\n    update(delta) {\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return this.position.add(this.offset);\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n            return this.backColor;\n        }\n        return Utils_1.ColorUtils.getHslFromAnimation(this.color);\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.ColorUtils.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.links = [];\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.NumberUtils.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector_1.Vector.create(pluginPos.x, pluginPos.y);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector_1.Vector.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.NumberUtils.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadImageShape(container, drawer) {\n        var _a, _b, _c, _d, _e;\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n            return;\n        }\n        const imageDrawer = drawer;\n        const images = imageDrawer.getImages(container).images;\n        const imageData = this.shapeData;\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n        const color = this.getFillColor();\n        let imageRes;\n        if (!image) {\n            return;\n        }\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\n            const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n            const domUrl = URL || window.URL || window.webkitURL || window;\n            const url = domUrl.createObjectURL(svg);\n            const img = new Image();\n            imageRes = {\n                data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n                loaded: false,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                source: imageData.src,\n            };\n            img.addEventListener(\"load\", () => {\n                if (this.image) {\n                    this.image.loaded = true;\n                    image.element = img;\n                }\n                domUrl.revokeObjectURL(url);\n            });\n            img.addEventListener(\"error\", () => {\n                domUrl.revokeObjectURL(url);\n                Utils_1.Utils.loadImage(imageData.src).then((img2) => {\n                    if (this.image && img2) {\n                        image.element = img2.element;\n                        this.image.loaded = true;\n                    }\n                });\n            });\n            img.src = url;\n        }\n        else {\n            imageRes = {\n                data: image,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n        return {\n            image: imageRes,\n            fill,\n            close,\n        };\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}