{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  const velocity = data.particle.velocity.x;\n\n  if (!(data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n    return;\n  }\n\n  const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n  data.particle.velocity.x *= -newVelocity;\n  const minPos = data.offset.x + data.size;\n\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nfunction bounceVertical(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  const velocity = data.particle.velocity.y;\n\n  if (!(data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n    return;\n  }\n\n  const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n  data.particle.velocity.y *= -newVelocity;\n  const minPos = data.offset.y + data.size;\n\n  if (data.bounds.bottom >= data.canvasSize.height) {\n    data.particle.position.y = data.canvasSize.height - minPos;\n  } else if (data.bounds.top <= 0) {\n    data.particle.position.y = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nclass Updater {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  update(delta) {\n    if (this.particle.destroyed) {\n      return;\n    }\n\n    this.updateLife(delta);\n\n    if (this.particle.destroyed || this.particle.spawning) {\n      return;\n    }\n\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateTilt(delta);\n    this.updateRoll(delta);\n    this.updateWobble(delta);\n    this.updateColor(delta);\n    this.updateStrokeColor(delta);\n    this.updateOutModes(delta);\n  }\n\n  updateLife(delta) {\n    const particle = this.particle;\n    let justSpawned = false;\n\n    if (particle.spawning) {\n      particle.lifeDelayTime += delta.value;\n\n      if (particle.lifeDelayTime >= particle.lifeDelay) {\n        justSpawned = true;\n        particle.spawning = false;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n      }\n    }\n\n    if (particle.lifeDuration === -1) {\n      return;\n    }\n\n    if (particle.spawning) {\n      return;\n    }\n\n    if (justSpawned) {\n      particle.lifeTime = 0;\n    } else {\n      particle.lifeTime += delta.value;\n    }\n\n    if (particle.lifeTime < particle.lifeDuration) {\n      return;\n    }\n\n    particle.lifeTime = 0;\n\n    if (particle.livesRemaining > 0) {\n      particle.livesRemaining--;\n    }\n\n    if (particle.livesRemaining === 0) {\n      particle.destroy();\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size;\n    particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n    particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n    particle.spawning = true;\n    particle.lifeDelayTime = 0;\n    particle.lifeTime = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n    particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n  }\n\n  updateOpacity(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const opacityOpt = particle.options.opacity;\n    const opacityAnim = opacityOpt.animation;\n    const minValue = particle.opacity.min;\n    const maxValue = particle.opacity.max;\n\n    if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n      return;\n    }\n\n    switch (particle.opacity.status) {\n      case Enums_1.AnimationStatus.increasing:\n        if (particle.opacity.value >= maxValue) {\n          particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n          particle.loops.opacity++;\n        } else {\n          particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        }\n\n        break;\n\n      case Enums_1.AnimationStatus.decreasing:\n        if (particle.opacity.value <= minValue) {\n          particle.opacity.status = Enums_1.AnimationStatus.increasing;\n          particle.loops.opacity++;\n        } else {\n          particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n        }\n\n        break;\n    }\n\n    checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n    if (!particle.destroyed) {\n      particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n    }\n  }\n\n  updateSize(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const sizeOpt = particle.options.size;\n    const sizeAnim = sizeOpt.animation;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const minValue = particle.size.min;\n    const maxValue = particle.size.max;\n\n    if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n      return;\n    }\n\n    switch (particle.size.status) {\n      case Enums_1.AnimationStatus.increasing:\n        if (particle.size.value >= maxValue) {\n          particle.size.status = Enums_1.AnimationStatus.decreasing;\n          particle.loops.size++;\n        } else {\n          particle.size.value += sizeVelocity;\n        }\n\n        break;\n\n      case Enums_1.AnimationStatus.decreasing:\n        if (particle.size.value <= minValue) {\n          particle.size.status = Enums_1.AnimationStatus.increasing;\n          particle.loops.size++;\n        } else {\n          particle.size.value -= sizeVelocity;\n        }\n\n    }\n\n    checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n    if (!particle.destroyed) {\n      particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n    }\n  }\n\n  updateAngle(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const rotate = particle.options.rotate;\n    const rotateAnimation = rotate.animation;\n    const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n\n    if (!rotateAnimation.enable) {\n      return;\n    }\n\n    switch (particle.rotate.status) {\n      case Enums_1.AnimationStatus.increasing:\n        particle.rotate.value += speed;\n\n        if (particle.rotate.value > max) {\n          particle.rotate.value -= max;\n        }\n\n        break;\n\n      case Enums_1.AnimationStatus.decreasing:\n      default:\n        particle.rotate.value -= speed;\n\n        if (particle.rotate.value < 0) {\n          particle.rotate.value += max;\n        }\n\n        break;\n    }\n  }\n\n  updateTilt(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const tilt = particle.options.tilt;\n    const tiltAnimation = tilt.animation;\n    const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n\n    if (!tiltAnimation.enable) {\n      return;\n    }\n\n    switch (particle.tilt.status) {\n      case Enums_1.AnimationStatus.increasing:\n        particle.tilt.value += speed;\n\n        if (particle.tilt.value > max) {\n          particle.tilt.value -= max;\n        }\n\n        break;\n\n      case Enums_1.AnimationStatus.decreasing:\n      default:\n        particle.tilt.value -= speed;\n\n        if (particle.tilt.value < 0) {\n          particle.tilt.value += max;\n        }\n\n        break;\n    }\n  }\n\n  updateRoll(delta) {\n    const particle = this.particle;\n    const roll = particle.options.roll;\n    const speed = particle.rollSpeed * delta.factor;\n    const max = 2 * Math.PI;\n\n    if (!roll.enable) {\n      return;\n    }\n\n    particle.rollAngle += speed;\n\n    if (particle.rollAngle > max) {\n      particle.rollAngle -= max;\n    }\n  }\n\n  updateWobble(delta) {\n    const particle = this.particle;\n    const wobble = particle.options.wobble;\n    const speed = particle.wobbleSpeed * delta.factor;\n    const distance = particle.wobbleDistance * delta.factor / (1000 / 60);\n    const max = 2 * Math.PI;\n\n    if (!wobble.enable) {\n      return;\n    }\n\n    particle.wobbleAngle += speed;\n\n    if (particle.wobbleAngle > max) {\n      particle.wobbleAngle -= max;\n    }\n\n    particle.position.x += distance * Math.cos(particle.wobbleAngle);\n    particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n  }\n\n  updateColor(delta) {\n    var _a, _b, _c;\n\n    const particle = this.particle;\n    const animationOptions = particle.options.color.animation;\n\n    if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n    }\n\n    if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n    }\n\n    if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n    }\n  }\n\n  updateStrokeColor(delta) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    const particle = this.particle;\n\n    if (!particle.stroke.color) {\n      return;\n    }\n\n    const animationOptions = particle.stroke.color.animation;\n    const valueAnimations = animationOptions;\n\n    if (valueAnimations.enable !== undefined) {\n      const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n\n      if (hue) {\n        this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n      }\n    } else {\n      const hslAnimations = animationOptions;\n      const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n\n      if (h) {\n        this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n      }\n\n      const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n\n      if (s) {\n        this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n      }\n\n      const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n\n      if (l) {\n        this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n      }\n    }\n  }\n\n  updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n    var _a;\n\n    const colorValue = value;\n\n    if (!colorValue || !valueAnimation.enable) {\n      return;\n    }\n\n    const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n    const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n\n    if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n      colorValue.value += velocity;\n\n      if (decrease && colorValue.value > max) {\n        colorValue.status = Enums_1.AnimationStatus.decreasing;\n        colorValue.value -= colorValue.value % max;\n      }\n    } else {\n      colorValue.value -= velocity;\n\n      if (colorValue.value < 0) {\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.value += colorValue.value;\n      }\n    }\n\n    if (colorValue.value > max) {\n      colorValue.value %= max;\n    }\n  }\n\n  updateOutModes(delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = this.particle.options.move.outModes;\n    this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n\n  updateOutMode(delta, outMode, direction) {\n    const container = this.container;\n    const particle = this.particle;\n\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.updateBounce(delta, direction, outMode);\n        break;\n\n      case Enums_1.OutMode.destroy:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle, true);\n        }\n\n        break;\n\n      case Enums_1.OutMode.out:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          this.fixOutOfCanvasPosition(direction);\n        }\n\n        break;\n\n      case Enums_1.OutMode.none:\n        this.bounceNone(direction);\n        break;\n    }\n  }\n\n  fixOutOfCanvasPosition(direction) {\n    const container = this.container;\n    const particle = this.particle;\n    const wrap = particle.options.move.warp;\n    const canvasSize = container.canvas.size;\n    const newPos = {\n      bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    };\n    const sizeValue = particle.getRadius();\n    const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n      particle.position.x = newPos.left;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    }\n\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.top;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.bottom;\n    }\n  }\n\n  updateBounce(delta, direction, outMode) {\n    const container = this.container;\n    const particle = this.particle;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n    bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  bounceNone(direction) {\n    const particle = this.particle;\n\n    if (particle.options.move.distance) {\n      return;\n    }\n\n    const gravityOptions = particle.options.move.gravity;\n    const container = this.container;\n\n    if (!gravityOptions.enable) {\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Users/heather/Development/code/react-particles/node_modules/tsparticles/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","constructor","container","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateTilt","updateRoll","updateWobble","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","setRangeValue","reset","lifeOptions","life","delay","duration","_a","_b","opacityOpt","opacity","opacityAnim","animation","enable","count","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","rotate","rotateAnimation","speed","Math","PI","tilt","tiltAnimation","roll","rollSpeed","rollAngle","wobble","wobbleSpeed","distance","wobbleDistance","wobbleAngle","cos","abs","sin","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugin","plugins","particleBounce","pos","getPosition","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.x;\n    if (!((data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n    data.particle.velocity.x *= -newVelocity;\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction bounceVertical(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.y;\n    if (!((data.direction === Enums_1.OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n    data.particle.velocity.y *= -newVelocity;\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateTilt(delta);\n        this.updateRoll(delta);\n        this.updateWobble(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            particle.lifeTime = 0;\n        }\n        else {\n            particle.lifeTime += delta.value;\n        }\n        if (particle.lifeTime < particle.lifeDuration) {\n            return;\n        }\n        particle.lifeTime = 0;\n        if (particle.livesRemaining > 0) {\n            particle.livesRemaining--;\n        }\n        if (particle.livesRemaining === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n        particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n        particle.spawning = true;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityOpt = particle.options.opacity;\n        const opacityAnim = opacityOpt.animation;\n        const minValue = particle.opacity.min;\n        const maxValue = particle.opacity.max;\n        if (!(!particle.destroyed &&\n            opacityAnim.enable &&\n            (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n            return;\n        }\n        switch (particle.opacity.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.opacity.value >= maxValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.opacity.value <= minValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                }\n                break;\n        }\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n        }\n    }\n    updateSize(delta) {\n        var _a;\n        const particle = this.particle;\n        const sizeOpt = particle.options.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const minValue = particle.size.min;\n        const maxValue = particle.size.max;\n        if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n            return;\n        }\n        switch (particle.size.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.size.value >= maxValue) {\n                    particle.size.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value += sizeVelocity;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.size.value <= minValue) {\n                    particle.size.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value -= sizeVelocity;\n                }\n        }\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!rotateAnimation.enable) {\n            return;\n        }\n        switch (particle.rotate.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.rotate.value += speed;\n                if (particle.rotate.value > max) {\n                    particle.rotate.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.rotate.value -= speed;\n                if (particle.rotate.value < 0) {\n                    particle.rotate.value += max;\n                }\n                break;\n        }\n    }\n    updateTilt(delta) {\n        var _a;\n        const particle = this.particle;\n        const tilt = particle.options.tilt;\n        const tiltAnimation = tilt.animation;\n        const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!tiltAnimation.enable) {\n            return;\n        }\n        switch (particle.tilt.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.tilt.value += speed;\n                if (particle.tilt.value > max) {\n                    particle.tilt.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.tilt.value -= speed;\n                if (particle.tilt.value < 0) {\n                    particle.tilt.value += max;\n                }\n                break;\n        }\n    }\n    updateRoll(delta) {\n        const particle = this.particle;\n        const roll = particle.options.roll;\n        const speed = particle.rollSpeed * delta.factor;\n        const max = 2 * Math.PI;\n        if (!roll.enable) {\n            return;\n        }\n        particle.rollAngle += speed;\n        if (particle.rollAngle > max) {\n            particle.rollAngle -= max;\n        }\n    }\n    updateWobble(delta) {\n        const particle = this.particle;\n        const wobble = particle.options.wobble;\n        const speed = particle.wobbleSpeed * delta.factor;\n        const distance = (particle.wobbleDistance * delta.factor) / (1000 / 60);\n        const max = 2 * Math.PI;\n        if (!wobble.enable) {\n            return;\n        }\n        particle.wobbleAngle += speed;\n        if (particle.wobbleAngle > max) {\n            particle.wobbleAngle -= max;\n        }\n        particle.position.x += distance * Math.cos(particle.wobbleAngle);\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n    updateColor(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const animationOptions = particle.options.color.animation;\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n        }\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n        }\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const particle = this.particle;\n        if (!particle.stroke.color) {\n            return;\n        }\n        const animationOptions = particle.stroke.color.animation;\n        const valueAnimations = animationOptions;\n        if (valueAnimations.enable !== undefined) {\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n            if (hue) {\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n            }\n        }\n        else {\n            const hslAnimations = animationOptions;\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n            if (h) {\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n            }\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n            if (s) {\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n            }\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n            if (l) {\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n            }\n        }\n    }\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n        var _a;\n        const colorValue = value;\n        if (!colorValue || !valueAnimation.enable) {\n            return;\n        }\n        const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n            colorValue.value += velocity;\n            if (decrease && colorValue.value > max) {\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n        else {\n            colorValue.value -= velocity;\n            if (colorValue.value < 0) {\n                colorValue.status = Enums_1.AnimationStatus.increasing;\n                colorValue.value += colorValue.value;\n            }\n        }\n        if (colorValue.value > max) {\n            colorValue.value %= max;\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.options.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle, true);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.options.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.options.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}